import java.awt.List;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;

import org.w3c.dom.*;

import com.sun.org.apache.xerces.internal.parsers.DOMParser;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

public class Zork {
	static Map map;
    static ArrayList<String> inventory = new ArrayList<String>();
	static Room currRoom = null;
	static Item currItem = null;

	public static void main(String[] args) throws Exception{
		if(args.length < 1){
			System.out.println("Usage: java Zork <filename>");
			System.exit(0);
		}
	    try {
	    	System.out.println("Welcome to Zork!");
	    	map = new Map();
	        DOMParser p = new DOMParser();
	        p.parse(args[0]);
	        Document doc = p.getDocument();
	        map = map.buildMap(doc.getElementsByTagName("map"));
	        StartGame();
	      } catch (Exception e) {e.printStackTrace();}
	}
	private static void StartGame(){
        String directions = "nesw";
        Scanner in = new Scanner(System.in);
    	currRoom = map.getRooms().get(0);
        while(true){
	    	System.out.println("\nRoom: " + currRoom.getName()
	    			+(currRoom.getType().equals("exit") ? " (exit)" : ""));
        	System.out.println("What would you like to do?");
        	String command = in.nextLine();
        	if(directions.contains(command)){//move
        		moveTo(command);
        	}else if(command.equals("i")){//inventory
        		printInv();
        	} else if(command.split(" ")[0].equals("take")){//take <item>
        		if(command.split(" ").length == 0) { System.out.println("Please enter item name"); continue;}
        		take(command.split(" ")[1]);
        	} else if(command.split(" ")[0].equals("open")){//open <item/exit>
        		if(command.split(" ").length == 1) { System.out.println("Please enter item name"); continue;}
        		open(command.split(" ")[1]);//handles container and exit
			} else if(command.split(" ")[0].equals("read")){ //read <item>
        		if(command.split(" ").length == 1) { System.out.println("Please enter item name"); continue;}
				read(command.split(" ")[1]);
			} else if(command.split(" ")[0].equals("drop")){ //drop <item>
        		if(command.split(" ").length == 1) { System.out.println("Please enter item name"); continue;}
				drop(command.split(" ")[1]);
			} else if(command.split(" ")[0].equals("put")){ //put <item> in <container>
        		if(command.split(" ").length < 4) { System.out.println("Usage: put <item> in <container>"); continue;}
				putItem(command.split(" ")[1],command.split(" ")[3]);
			} else if(command.split(" ")[0].equals("turn")){ //turn on <item>
        		if(command.split(" ").length < 3) { System.out.println("Usage: turn on <item>"); continue;}
				turnOn(command.split(" ")[2]);
			} else if(command.split(" ")[0].equals("attack")){ //attack <creature> with <item>
        		if(command.split(" ").length < 4) { System.out.println("Usage: attack <creature> with <item>"); continue;}
				attack(command.split(" ")[1],command.split(" ")[3]);
        	} else if(command.equals("look")){//look
	        	look();
        	} else if(command.startsWith("help")){//help (I added)
        		printHelp();
        	} else if(command.startsWith("quit")){//help (I added)
				System.out.println("Are you sure? (y/n)");
				if(!(command = in.nextLine()).equals("y")) {
					continue;
				}
        		System.exit(0);
        	}else{
        		System.out.println("Command <"+command+"> not recognized");
        	}
        }
	}
	private static void attack(String c, String i){
	//TODO this action
		System.out.println("IMPLEMENT ATTACK");
	}
	private static void turnOn(String i){
	//TODO this action
		if(! inventory.contains(i)){
			System.out.println("No item in inventory");
			return
		}
		//currRoom.getItem(i).turnOn(); //idk what im doing lol
		System.out.println("IMPLEMENT TURN ON");
	}
	private static void putItem(String i, String c){
	//TODO this action
		System.out.println("IMPLEMENT PUT ITEM");
	}
	private static void drop(String iName){
		if(!inventory.remove(iName)){
			System.out.println("No such item in inventory");
			return;
		}
		currRoom.addItem(iName);
	}
	private static void read(String iName){
		if(!inventory.contains(iName)){
			System.out.println("No such item in inventory");
			return;
		}
		currItem = map.getItemByName(iName);
		if(currItem.getWriting() == null){
			System.out.println("Nothing written");
		} else {
			System.out.println(currItem.getWriting());
		}
	}
    private static void printHelp(){
		System.out.println("n, s, e, w - movement commands\n"
				+"i - inventory\n"
				+"take (item)\n"
				+"open (container)\n"
				+"open exit\n"
				+"read (item)\n"
				+"drop (item)\n"
				+"put (item)\n"
				+"turn on (item)\n"
				+"attack (creature) with (item)\n"
				+"look"
				);
	}
	private static void moveTo(String command){
		Border b = currRoom.getBorder(command);
		if(b == null) {
			System.out.println("No room in that direction!");
		} else {
			for(int j = 0; j < map.getRooms().size(); j++) {
				Room r = map.getRooms().get(j);
				if(r.getName().equals(b.getName()) ){
	    			currRoom = r;
				}
			}
		}
	}
	private static void look(){
		System.out.println(currRoom.getDescription());
		System.out.print("Items: ");
		if(currRoom.getItem().isEmpty()){
			System.out.println("No items in room");
		}else {
	    	for(int j=0; j < currRoom.getItem().size(); j++ ){
	    		System.out.println(currRoom.getItem().get(j));
	    	}
		}
	}
	private static void take(String iName){
		if(!currRoom.getItem().contains(iName)){
			System.out.println("Item <"+iName+"> is not in room");
			return;
		}
		currRoom.takeItem(iName);
		inventory.add(iName);
		System.out.println("Item <"+iName+"> added to inventory");
	}
	private static void open (String target){
		if(target.equals("exit")){
			if(currRoom.getType().equals("exit")){
				System.out.println("Game Over: Victory!");
				System.exit(0);
			}
			System.out.println("Not an exit!");
		}
	}
	private static void printInv(){
		System.out.print("Inventory: ");
		if(inventory.isEmpty()){
			System.out.println("empty");
		}else {
			System.out.print(inventory.get(0));
			for(int i = 1; i < inventory.size() ; i++){
				System.out.print(","+inventory.get(i));
			}
			System.out.println();
		}
	}
}
